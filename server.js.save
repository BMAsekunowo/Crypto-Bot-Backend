















































const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const axios = require("axios");

const app = express();

app.use(cors());
app.use(bodyParser.json());

// Example configuration
const config = {
  rug_threshold: -90,
  tier_1_volume_threshold: 1000000, // Minimum trading volume
};

// Fetch live token data from DEX Screener
app.get("/api/coins", async (req, res) => {
  try {
    // Fetch tokens from DEX Screener API
    const response = await axios.get("https://api.dexscreener.com/latest/dex/pairs");

    // Filter tokens based on Tier 1 Volume Threshold
    const filteredCoins = response.data.pairs.filter(
      (coin) => coin.volumeUsd24h >= config.tier_1_volume_threshold
    );

    // Format the data for the frontend
    const formattedCoins = filteredCoins.map((coin) => ({
      token_address: coin.address,
      name: coin.baseToken.name,
      symbol: coin.baseToken.symbol,
      price: parseFloat(coin.priceUsd),
      volume: coin.volumeUsd24h,
    }));

    res.json(formattedCoins);
  } catch (error) {
    console.error("Error fetching coins from DEX Screener:", error.message);
    res.status(500).json({ message: "Failed to fetch token data" });
  }
});

// Endpoint: Get configuration
app.get("/api/config", (req, res) => {
  res.json(config);
});

// Endpoint: Handle trade actions (buy/sell)
app.post("/api/trade", (req, res) => {
  const { tokenAddress, action } = req.body;
  if (!tokenAddress || !action) {
    return res
      .status(400)
      .json({ message: "Invalid request. Missing tokenAddress or action." });
  }
  res.json({ message: `${action.toUpperCase()} action executed for token ${tokenAddress}` });
});

// Start the server
const PORT = 5001;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
